import { NextResponse } from "next/server";
import { connectToDatabase } from "@/lib/mongodb";
import Order from "@/models/Order";


// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ owner_wallet
export async function GET(req: Request) {
  try {
    await connectToDatabase();

    // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô Query Parameters
    const { searchParams } = new URL(req.url);
    const owner_wallet = searchParams.get("owner");

    const query = owner_wallet ? { owner_wallet } : {}; // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ owner_wallet ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

    const orders = await Order.find(query).sort({ createdAt: -1 });

    return NextResponse.json({ orders }, { status: 200 });
  } catch (error) {
    console.error("‚ùå Error fetching orders:", error);
    return NextResponse.json({ message: "Server error", error }, { status: 500 });
  }
}


export async function POST(req: Request) {
  try {
    console.log("üì• Receiving Request...");
    await connectToDatabase();
    console.log("‚úÖ Database connected");

    // ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Body
    const { owner_wallet, name, description, price, image_url } = await req.json();
    console.log("üì¶ Received Data:", { owner_wallet, name, description, price, image_url });

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
    if (!owner_wallet || !name || !description || !price || !image_url) {
      console.error("‚ö†Ô∏è Missing fields:", { owner_wallet, name, description, price, image_url });
      return NextResponse.json({ message: "Missing fields" }, { status: 400 });
    }

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const newOrder = await Order.create({
      owner_wallet,
      name,
      description,
      price: Number(price),
      image_url, // ‚úÖ ‡πÉ‡∏ä‡πâ image_url ‡πÅ‡∏ó‡∏ô base64
    });

    console.log("‚úÖ Order Created:", newOrder);
    return NextResponse.json({ message: "Item added successfully", order: newOrder }, { status: 201 });

  } catch (error) {
    console.error("‚ùå Server error:", error);
    return NextResponse.json({ message: "Server error", error: error }, { status: 500 });
  }
}
